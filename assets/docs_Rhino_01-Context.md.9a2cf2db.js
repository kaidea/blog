import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.82dd189e.js";const F=JSON.parse('{"title":"Context.java","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Rhino/01-Context.md","filePath":"docs/Rhino/01-Context.md"}'),p={name:"docs/Rhino/01-Context.md"},e=l(`<h1 id="context-java" tabindex="-1">Context.java <a class="header-anchor" href="#context-java" aria-label="Permalink to &quot;Context.java&quot;">​</a></h1><p>public static final int FEATURE_NON_ECMA_GET_YEAR = 1;</p><p>这段代码定义了一个Java常量，用于控制 <code>Date</code> 原型中 <code>getYear()</code> 方法的行为。文档注释中说明，当使用 <code>hasFeature()</code>方法时，默认行为是按照 ECMAScript B.2.4 标准从年份中减去 1900。但是如果 <code>FEATURE_NON_ECMA_GET_YEAR</code> 标志被设置为 true，则只有年份在 1900 到 2000 之间的情况下才会进行减法运算。</p><p>这个特性标志可以被用在需要处理日期值的代码中，如果它需要与 ECMAScript 标准的规定不同的行为，例如，处理遗留系统或数据集的兼容性问题。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 检查_feature属性</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Date.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;_feature&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 检查是否非ECMA模式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Date._feature </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#79B8FF;">FEATURE_NON_ECMA_GET_YEAR</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 非ECMAScript模式将不会从年份中减去1900</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> today </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();    </span><span style="color:#6A737D;">// 获取当前日期</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> year </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> today.</span><span style="color:#B392F0;">getYear</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取年份</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`ECMA mode: \${</span><span style="color:#E1E4E8;">year</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//ECMAScript模式下返回121</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Non-ECMA mode: \${</span><span style="color:#E1E4E8;">year</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1900</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//非ECMAScript模式下返回2021</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> today </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();    </span><span style="color:#6A737D;">// 获取当前日期</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> year </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> today.</span><span style="color:#B392F0;">getYear</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取年份</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`ECMA mode: \${</span><span style="color:#E1E4E8;">year</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//ECMAScript模式下返回121</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Non-ECMA mode: \${</span><span style="color:#E1E4E8;">year</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//非ECMAScript模式下返回121</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Feature not supported&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 检查_feature属性</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Date.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_feature&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 检查是否非ECMA模式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Date._feature </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Date.</span><span style="color:#005CC5;">FEATURE_NON_ECMA_GET_YEAR</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 非ECMAScript模式将不会从年份中减去1900</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();    </span><span style="color:#6A737D;">// 获取当前日期</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> year </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> today.</span><span style="color:#6F42C1;">getYear</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取年份</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`ECMA mode: \${</span><span style="color:#24292E;">year</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//ECMAScript模式下返回121</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Non-ECMA mode: \${</span><span style="color:#24292E;">year</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1900</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//非ECMAScript模式下返回2021</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();    </span><span style="color:#6A737D;">// 获取当前日期</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> year </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> today.</span><span style="color:#6F42C1;">getYear</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取年份</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`ECMA mode: \${</span><span style="color:#24292E;">year</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//ECMAScript模式下返回121</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Non-ECMA mode: \${</span><span style="color:#24292E;">year</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//非ECMAScript模式下返回121</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Feature not supported&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码首先检查是否有定义了 <code>_feature</code>属性，然后检查 <code>FEATURE_NON_ECMA_GET_YEAR</code>特性是否在实例化时设置为true。如果是，那么 <code>getYear()</code>方法将不会从年份中减去1900。我们可以从输出结果中看到，对于当前日期而言，ECMAScript模式下会将年份减去1900，而非ECMAScript模式下则不会进行这个操作。</p><p>ECMAScript B.2.4 规范定义了 <code>Date.getYear()</code>和 <code>Date.setYear(yearValue)</code>方法的行为和实现。该规范描述了以下几个主要部分：</p><ol><li><code>getYear()</code>方法返回表示给定日期中年份的两位数值。例如，1996年的年份将返回96。</li><li><code>setYear(yearValue)</code>方法将年份值分配给给定日期对象。如果 <code>yearValue</code>的值等于1900到 1999 之间，则它被视为一个传统的年份值，应该减去1900。如果 <code>yearValue</code>的值是0到99之间，则它被视为在1900年之后的年份值。如果 <code>yearValue</code>的值大于或等于100，则它被视为一个年份。</li><li><code>getYear()</code>方法的返回值是一个相对值，而非绝对值，因此应该进行其他计算来得到相应的年份值。</li></ol><p>根据这个规范，如果要获取年份的绝对值，需要为返回值正确的加上 1900。并且在使用 <code>setYear()</code> 方法时，如果传入的值在 0 到 99 之间，则被认为是一个相对值，并按照相对方式设置日期对象的年份。</p><p>需要注意的是，在 ECMAScript 5 中，已经不推荐使用 <code>getYear()</code> 和 <code>setYear()</code> 方法，而是推荐使用 <code>getFullYear()</code> 和 <code>setFullYear()</code> 方法来获取和设置年份。因此，使用 <code>FEATURE_NON_ECMA_GET_YEAR</code>属性来修改 <code>getYear()</code>方法的行为已经不是一个被推荐的做法。</p><p>ECMAScript B.2.4 规范可以在以下链接中查看：<a href="https://www.ecma-international.org/ecma-262/5.1/#sec-B.2.4" target="_blank" rel="noreferrer">https://www.ecma-international.org/ecma-262/5.1/#sec-B.2.4</a></p><p>请注意，这是 ECMAScript 5.1 标准的规范。在 ECMAScript 6 之后的版本中，<code>Date.getYear()</code>方法已被标记为已废弃，不再推荐使用。因此，对于新开发的 JavaScript 代码，应该尽可能使用其他方法来获取和设置日期中的年份值。</p><p>java.io.Closeable</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">public class Example implements Closeable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    private BufferedReader reader;</span></span>
<span class="line"><span style="color:#E1E4E8;">    public Example(String fileName) throws FileNotFoundException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        reader = new BufferedReader(new FileReader(fileName));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    public String readLine() throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        return reader.readLine();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    public void close() throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        reader.close();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    public static void main(String[] args) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Example ex = new Example(&quot;./assets/file.txt&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">        try {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String line = ex.readLine();</span></span>
<span class="line"><span style="color:#E1E4E8;">            while (line != null) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.println(line);</span></span>
<span class="line"><span style="color:#E1E4E8;">                line = ex.readLine();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } finally {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ex.close();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//在这个例子中，我们创建了一个用于读取文件的Example类。该类实现了Closeable接口，并重写close()方法，以在程序结束时关闭读取文件的BufferedReader资源。</span></span>
<span class="line"><span style="color:#6A737D;">//在main()方法中，我们使用try-finally语句块调用Example类打开文件并读取内容。在这个例子中，不管是否出现异常，finally块中的ex.close()语句都会执行，以确保文件资源得到释放。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">public class Example implements Closeable {</span></span>
<span class="line"><span style="color:#24292E;">    private BufferedReader reader;</span></span>
<span class="line"><span style="color:#24292E;">    public Example(String fileName) throws FileNotFoundException {</span></span>
<span class="line"><span style="color:#24292E;">        reader = new BufferedReader(new FileReader(fileName));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    public String readLine() throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">        return reader.readLine();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @Override</span></span>
<span class="line"><span style="color:#24292E;">    public void close() throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">        reader.close();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    public static void main(String[] args) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">        Example ex = new Example(&quot;./assets/file.txt&quot;);</span></span>
<span class="line"><span style="color:#24292E;">        try {</span></span>
<span class="line"><span style="color:#24292E;">            String line = ex.readLine();</span></span>
<span class="line"><span style="color:#24292E;">            while (line != null) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.println(line);</span></span>
<span class="line"><span style="color:#24292E;">                line = ex.readLine();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } finally {</span></span>
<span class="line"><span style="color:#24292E;">            ex.close();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//在这个例子中，我们创建了一个用于读取文件的Example类。该类实现了Closeable接口，并重写close()方法，以在程序结束时关闭读取文件的BufferedReader资源。</span></span>
<span class="line"><span style="color:#6A737D;">//在main()方法中，我们使用try-finally语句块调用Example类打开文件并读取内容。在这个例子中，不管是否出现异常，finally块中的ex.close()语句都会执行，以确保文件资源得到释放。</span></span></code></pre></div><p>window.chrome.csi() 是一个用于返回 Chrome 内核统计信息的方法，该方法返回一个对象，包含了一些有关页面加载时间、网络信息、呈现信息等的指标。</p><p>该方法的返回对象包括以下属性：</p><p>startE: 整数，用于表示从导航开始到开始计算 Chrome 浏览器网络请求的时间戳（微秒）。</p><p>requestTime: 整数，表示网络请求开始时间的时间戳（微秒）。</p><p>firstPaintTime: 整数，表示首次呈现页面到屏幕的时间（微秒）。</p><p>finishTime: 整数，表示网络请求结束和页面呈现结束的时间戳（微秒）。</p><p>navType: 字符串，表示浏览器的导航类型，比如 &#39;reload&#39;, &#39;back_forward&#39; 等。</p><p>pageT: 整数，表示页面加载完成的总时间（微秒）。</p><p>networkT: 整数，表示浏览器发送所有网络请求的总时间（微秒）。</p><p>tcpT: 整数，表示浏览器与服务器建立TCP连接的时间（微秒）。</p><p>dnsT: 整数，表示 DNS 查询的时间（微秒）。</p><p>proxyT: 整数，表示与代理服务器建立连接的时间（微秒）。</p><p>sslT: 整数，表示 SSL/TLS 握手的时间（微秒）。</p><p>sendT: 整数，表示发送 HTTP 请求的时间（微秒）。</p><p>receiveT: 整数，表示接收 HTTP 响应的时间（微秒）。</p><p>org.mozilla.javascript.optimizer.Codegen</p><p>该类用于生成优化的 Java 字节码版本的 JavaScript 代码。</p><h2 id="error-行号" tabindex="-1">Error 行号 <a class="header-anchor" href="#error-行号" aria-label="Permalink to &quot;Error 行号&quot;">​</a></h2><p>举个例子，假设有一个JavaScript函数发生了错误，并抛出了一个Error对象，我们可以在控制Rhino引擎特性的开关后，查看生成的Error对象是否自动添加了文件名和行号属性：</p><p>Copy code // 示例代码 function divide(dividend, divisor) { if (divisor === 0) { // 抛出带有错误信息的Error对象 throw new Error(&#39;Divisor cannot be zero.&#39;); } return dividend / divisor; }</p><p>// 执行函数，通过try-catch捕获可能的错误 try { divide(10, 0); // 会抛出错误 } catch (error) { // 查看error对象是否包含文件名和行号属性 console.log(error.fileName, error.lineNumber); } 当引擎特性开启时，生成的Error对象会自动携带文件名和行号属性，输出：</p><p>Copy code file.js 4 当引擎特性关闭时，需要手动传入文件名和行号参数创建Error对象，示例代码：</p><p>Copy code // 特性关闭，手动传入文件名和行号参数 function divide(dividend, divisor) { if (divisor === 0) { // 手动传入文件名和行号参数创建Error对象 throw new Error(&#39;Divisor cannot be zero.&#39;, &#39;file.js&#39;, 4); } return dividend / divisor; }</p><p>// 执行函数，通过try-catch捕获可能的错误 try { divide(10, 0); // 会抛出错误 } catch (error) { // 查看error对象是否包含文件名和行号属性 console.log(error.fileName, error.lineNumber); } 输出：</p><p>Copy code file.js 4 可以发现，在两种情况下都成功取到了文件名和行号属性。但是在关闭特性的情况下，需要手动传入这些属性，增加了代码的复杂度，同时也不符合ECMA 262规范。因此，在需要严格遵守规范的情况下，应该保持特性关闭。</p>`,39),o=[e];function r(c,t,E,i,y,d){return a(),n("div",null,o)}const C=s(p,[["render",r]]);export{F as __pageData,C as default};
