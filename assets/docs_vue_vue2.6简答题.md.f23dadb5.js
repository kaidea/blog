import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.82dd189e.js";const h=JSON.parse('{"title":"vue2 的 响应式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/vue/vue2.6简答题.md","filePath":"docs/vue/vue2.6简答题.md"}'),p={name:"docs/vue/vue2.6简答题.md"},o=l(`<h3 id="vue和react对比" tabindex="-1">vue和React对比 <a class="header-anchor" href="#vue和react对比" aria-label="Permalink to &quot;vue和React对比&quot;">​</a></h3><h4 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h4><ul><li>都有组件化思想</li><li>都支持服务器端渲染</li><li>都有Virtual DOM（虚拟dom）</li><li>数据驱动视图</li><li>都有支持native的方案：<code>Vue</code>的<code>weex</code>、<code>React</code>的<code>React native</code></li><li>都有自己的构建工具：<code>Vue</code>的<code>vue-cli</code>、<code>React</code>的<code>Create React App</code></li></ul><h5 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h5><ul><li>数据流向的不同。<code>react</code>从诞生开始就推崇单向数据流，而<code>Vue</code>是双向数据流</li><li>数据变化的实现原理不同。<code>react</code>使用的是不可变数据，而<code>Vue</code>使用的是可变的数据</li><li>组件化通信的不同。<code>react</code>中我们通过使用回调函数来进行通信的，而<code>Vue</code>中子组件向父组件传递消息有两种方式：事件和回调函数</li><li>diff算法不同。<code>react</code>主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。<code>Vue</code> 使用双向指针，边对比，边更新DOM</li></ul><h3 id="vue的生命周期有哪些-分别有哪些作用" tabindex="-1">vue的生命周期有哪些，分别有哪些作用 <a class="header-anchor" href="#vue的生命周期有哪些-分别有哪些作用" aria-label="Permalink to &quot;vue的生命周期有哪些，分别有哪些作用&quot;">​</a></h3><ul><li>beforeCreate 创建前的状态，初始化事件和生命周期。</li><li>created 创建完毕状态</li><li>beforeMount 挂载前状态， 是否有元素el，是否有模板，是否渲染到了函数内，是否作为模板进行了outerHTML渲染到了页</li><li>mounted 挂载结束状态，渲染到真正的DOM。</li><li>beforeUpdate 可以拿到实例化改变前的状态</li><li>Updated拿到变动完成的状态</li><li>beforeDestory 消亡前的状态</li><li>destoryed 实例化或组件被摧毁消亡</li></ul><h3 id="简述v-if-和v-show的作用" tabindex="-1">简述v-if 和v-show的作用 <a class="header-anchor" href="#简述v-if-和v-show的作用" aria-label="Permalink to &quot;简述v-if 和v-show的作用&quot;">​</a></h3><ul><li>都能实现指定内容的显示和隐藏效果</li><li>v-if是通过 创建和销毁dom节点显示隐藏</li><li>v-show 是通过 display:none 来实现显示隐藏</li></ul><h3 id="什么是跨域-什么是同源策略-项目中你是如何解决跨域的" tabindex="-1">什么是跨域？什么是同源策略？项目中你是如何解决跨域的 <a class="header-anchor" href="#什么是跨域-什么是同源策略-项目中你是如何解决跨域的" aria-label="Permalink to &quot;什么是跨域？什么是同源策略？项目中你是如何解决跨域的&quot;">​</a></h3><ul><li><p>同源策略是浏览器的一种安全策略，所谓同源是指，域名，协议，端口完全相同</p></li><li><p>一个域的页面去请求另一个域的资源 （协议，端口，主域名，子域名）不同会造成跨域</p></li><li><p>jsonp跨域 动态添加一个<code>&lt;script&gt;</code>标签 这个标签的src是没有跨域限制的</p></li><li><p>cors跨域资源共享 在请求服务器的时候,服务器给一个响应头，告诉客户段，这些数据可以访问</p></li></ul><h3 id="vue循环中为什么要加上key" tabindex="-1">vue循环中为什么要加上key? <a class="header-anchor" href="#vue循环中为什么要加上key" aria-label="Permalink to &quot;vue循环中为什么要加上key?&quot;">​</a></h3><ul><li>加上key（具有唯一性） 后 vue中的diff算法就会找到这个节点插入新的节点</li><li>key的作用主要是为了高效的更新虚拟DOM</li></ul><h3 id="mvvm是什么-你所了解的mvvm框架有哪些" tabindex="-1">mvvm是什么？你所了解的mvvm框架有哪些 <a class="header-anchor" href="#mvvm是什么-你所了解的mvvm框架有哪些" aria-label="Permalink to &quot;mvvm是什么？你所了解的mvvm框架有哪些&quot;">​</a></h3><p>Model：模型层，负责处理业务逻辑以及和服务器端进行交互 View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面 ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</p><p>另一方面它实现了DOM Listener,当DOM发生一些事件时,可以监听到,并在需要的情况先改变对应的Data</p><p>vue react angular ember drop</p><h3 id="vue的钩子函数中created和mounted的区别" tabindex="-1">Vue的钩子函数中created和mounted的区别？ <a class="header-anchor" href="#vue的钩子函数中created和mounted的区别" aria-label="Permalink to &quot;Vue的钩子函数中created和mounted的区别？&quot;">​</a></h3><p>1）created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。 2）mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。 3）其实两者比较好理解，通常created使用的次数多，而mounted通常是在一些插件的使用或者组件的使用中进行操作。</p><h3 id="watch、computed和methods之间的对比" tabindex="-1">watch、computed和methods之间的对比 <a class="header-anchor" href="#watch、computed和methods之间的对比" aria-label="Permalink to &quot;watch、computed和methods之间的对比&quot;">​</a></h3><ol><li><code>computed</code> 属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑</li><li><code>watch</code> 一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定的数据变换，从而惊醒某些具体的业务逻辑操作</li></ol><h3 id="vue路由传递参数的方式" tabindex="-1">vue路由传递参数的方式 <a class="header-anchor" href="#vue路由传递参数的方式" aria-label="Permalink to &quot;vue路由传递参数的方式&quot;">​</a></h3><ul><li><p>params 的类型</p><ul><li>配置路由格式 ：/router/:id</li><li>传递的方式:在path后面跟上对应的值</li><li>传递后形成的路径 ：/router/123 ,/router/abc</li></ul></li><li><p>query 类型</p><ul><li>配置路由格式 ：/router ,也就是普通配置</li><li>传递的方式:对象中使用query的key作为传递方式</li><li>传递后形成的路径:/router?id=123,/router?id=abc</li></ul></li></ul><h3 id="vue程序运行过程" tabindex="-1">vue程序运行过程 <a class="header-anchor" href="#vue程序运行过程" aria-label="Permalink to &quot;vue程序运行过程&quot;">​</a></h3><ol><li>当吧模板传给vue时 vue会将模板保存在<code>vm.options.tmplate</code></li><li>解析成 ast(抽象语法树 abstract syntax tree)</li><li>compile 成render函数</li><li>render 成虚拟dom树</li><li>最后把虚拟dom树渲染成真正的dom</li></ol><blockquote><p>runtime-compiler</p></blockquote><blockquote><p>template=&gt;ast=&gt;render=&gt;vdom=&gt;UI</p></blockquote><blockquote><p>runtime-only</p></blockquote><blockquote><p>render=&gt;vdom=&gt;UI</p></blockquote><h3 id="vuex的五大核心属性是什么" tabindex="-1">Vuex的五大核心属性是什么？ <a class="header-anchor" href="#vuex的五大核心属性是什么" aria-label="Permalink to &quot;Vuex的五大核心属性是什么？&quot;">​</a></h3><p>VueX 是一个专门为 Vue.js 应用设计的状态管理架构，统一管理和维护各个vue组件的可变化状态(你可以理解成 vue 组件里的某些 data )。 Vue有五个核心概念，state, getters, mutations, actions, modules。 state =&gt; 基本数据 getters =&gt; 从基本数据派生的数据 mutations =&gt; 提交更改数据的方法，同步！ actions =&gt; 像一个装饰器，包裹mutations，使之可以异步。 modules =&gt; 模块化Vuex</p><h3 id="v-if和v-for哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能" tabindex="-1">v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能？ <a class="header-anchor" href="#v-if和v-for哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能" aria-label="Permalink to &quot;v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能？&quot;">​</a></h3><p>由于<code>web components</code> 出现此方法出现了问题 源码中找答案compiler/codegen/index.js</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;p v-for=&quot;item in items&quot; v-if=&quot;condition&quot;&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;p v-for=&quot;item in items&quot; v-if=&quot;condition&quot;&gt;</span></span></code></pre></div><p>做个测试如下</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Vue事件处理&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;demo&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!-- &lt;p v-for=&quot;child in children&quot; v-if=&quot;isFolder&quot;&gt;{{child.title}}&lt;/p&gt; --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;isFolder&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;child in children&quot;</span><span style="color:#E1E4E8;">&gt;{{child.title}}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../../dist/vue.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            el: </span><span style="color:#9ECBFF;">&#39;#demo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    children: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                        {title:</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                        {title:</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            computed: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">isFolder</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.children </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(app.$options.render);</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Vue事件处理&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;demo&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!-- &lt;p v-for=&quot;child in children&quot; v-if=&quot;isFolder&quot;&gt;{{child.title}}&lt;/p&gt; --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;isFolder&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;child in children&quot;</span><span style="color:#24292E;">&gt;{{child.title}}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../dist/vue.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建实例</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            el: </span><span style="color:#032F62;">&#39;#demo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    children: [</span></span>
<span class="line"><span style="color:#24292E;">                        {title:</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                        {title:</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                    ]</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            computed: {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">isFolder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.children </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(app.$options.render);</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>两者同级时，渲染函数如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(function anonymous(</span></span>
<span class="line"><span style="color:#e1e4e8;">) {</span></span>
<span class="line"><span style="color:#e1e4e8;">with(this){return _c(&#39;div&#39;,{attrs:{&quot;id&quot;:&quot;demo&quot;}},[_c(&#39;h1&#39;,[_v(&quot;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&quot;)]),_v(&quot; &quot;),</span></span>
<span class="line"><span style="color:#e1e4e8;">_l((children),function(child){return (isFolder)?_c(&#39;p&#39;,[_v(_s(child.title))]):_e()})],2)}</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(function anonymous(</span></span>
<span class="line"><span style="color:#24292e;">) {</span></span>
<span class="line"><span style="color:#24292e;">with(this){return _c(&#39;div&#39;,{attrs:{&quot;id&quot;:&quot;demo&quot;}},[_c(&#39;h1&#39;,[_v(&quot;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&quot;)]),_v(&quot; &quot;),</span></span>
<span class="line"><span style="color:#24292e;">_l((children),function(child){return (isFolder)?_c(&#39;p&#39;,[_v(_s(child.title))]):_e()})],2)}</span></span>
<span class="line"><span style="color:#24292e;">})</span></span></code></pre></div><blockquote><p>_l包含了isFolder的条件判断</p></blockquote><p>两者不同级时，渲染函数如下</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(function anonymous(</span></span>
<span class="line"><span style="color:#e1e4e8;">) {</span></span>
<span class="line"><span style="color:#e1e4e8;">with(this){return _c(&#39;div&#39;,{attrs:{&quot;id&quot;:&quot;demo&quot;}},[_c(&#39;h1&#39;,[_v(&quot;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&quot;)]),_v(&quot; &quot;),</span></span>
<span class="line"><span style="color:#e1e4e8;">(isFolder)?_l((children),function(child){return _c(&#39;p&#39;,[_v(_s(child.title))])}):_e()],2)}</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(function anonymous(</span></span>
<span class="line"><span style="color:#24292e;">) {</span></span>
<span class="line"><span style="color:#24292e;">with(this){return _c(&#39;div&#39;,{attrs:{&quot;id&quot;:&quot;demo&quot;}},[_c(&#39;h1&#39;,[_v(&quot;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&quot;)]),_v(&quot; &quot;),</span></span>
<span class="line"><span style="color:#24292e;">(isFolder)?_l((children),function(child){return _c(&#39;p&#39;,[_v(_s(child.title))])}):_e()],2)}</span></span>
<span class="line"><span style="color:#24292e;">})</span></span></code></pre></div><blockquote><p>先判断了条件再看是否执行_l</p></blockquote><p><strong>结论：</strong></p><ol><li>显然v-for优先于v-if被解析（把你是怎么知道的告诉面试官）</li><li>如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环都不可避免，浪费了性能</li><li>要避免出现这种情况，则在外层嵌套template，在这一层进行v-if判断，然后在内部进行v-for循环</li><li>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</li></ol><h3 id="vue组件data为什么必须是个函数而vue的根实例则没有此限制" tabindex="-1">Vue组件data为什么必须是个函数而Vue的根实例则没有此限制？ <a class="header-anchor" href="#vue组件data为什么必须是个函数而vue的根实例则没有此限制" aria-label="Permalink to &quot;Vue组件data为什么必须是个函数而Vue的根实例则没有此限制？&quot;">​</a></h3><p>源码中找答案：src\\core\\instance\\state.js - initData()</p><blockquote><p>函数每次执行都会返回全新data对象实例</p></blockquote><p>测试代码如下</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Vue事件处理&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;demo&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;vue组件data为什么必须是个函数? &lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">comp</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">comp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#FDAEB7;font-style:italic;">comp</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">comp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../../dist/vue.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;comp&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">            template:</span><span style="color:#9ECBFF;">&#39;&lt;div @click=&quot;counter++&quot;&gt;{{counter}}&lt;/div&gt;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            data: {counter: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            el: </span><span style="color:#9ECBFF;">&#39;#demo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Vue事件处理&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;demo&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;vue组件data为什么必须是个函数? &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">comp</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">comp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">comp</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">comp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../dist/vue.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;comp&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">            template:</span><span style="color:#032F62;">&#39;&lt;div @click=&quot;counter++&quot;&gt;{{counter}}&lt;/div&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            data: {counter: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建实例</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            el: </span><span style="color:#032F62;">&#39;#demo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><img src="https://pic4.zhimg.com/80/v2-74717ccc271a343cf7713370e23e7e5f_720w.jpg" alt="img"></p><blockquote><p>程序甚至无法通过vue检测</p></blockquote><p><strong>结论</strong></p><p>Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也是因为根实例只能有一个，不需要担心这种情况。</p><h1 id="vue2-的-响应式" tabindex="-1">vue2 的 响应式 <a class="header-anchor" href="#vue2-的-响应式" aria-label="Permalink to &quot;vue2 的 响应式&quot;">​</a></h1><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Emvue</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//保存选项</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$options</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//传入data选项</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">options.data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//响应化</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果 值为空 或者不是对象  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">value</span><span style="color:#F97583;">||typeof</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//遍历数据响应式</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(value).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(value,key,value[key])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//代理转发  简化使用调用的$data 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">proxyData</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//递归遍历 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(val)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(obj,key,{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">NewVal</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(NewVal</span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;">val){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    val</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NewVal</span></span>
<span class="line"><span style="color:#E1E4E8;">                    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(key</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;属性更新了&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">proxyData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">){      </span><span style="color:#6A737D;">//代理转发</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,key,{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$data[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">NewVal</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$data[key]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NewVal</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Emvue</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//保存选项</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$options</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//传入data选项</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">options.data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//响应化</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$data)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果 值为空 或者不是对象  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">||typeof</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">!==</span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//遍历数据响应式</span></span>
<span class="line"><span style="color:#24292E;">        Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(value).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(value,key,value[key])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//代理转发  简化使用调用的$data 对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">proxyData</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">,</span><span style="color:#E36209;">key</span><span style="color:#24292E;">,</span><span style="color:#E36209;">val</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//递归遍历 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(val)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(obj,key,{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">NewVal</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(NewVal</span><span style="color:#D73A49;">!==</span><span style="color:#24292E;">val){</span></span>
<span class="line"><span style="color:#24292E;">                    val</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NewVal</span></span>
<span class="line"><span style="color:#24292E;">                    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;属性更新了&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">proxyData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">){      </span><span style="color:#6A737D;">//代理转发</span></span>
<span class="line"><span style="color:#24292E;">        Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,key,{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$data[key]</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">NewVal</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$data[key]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NewVal</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,55),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const v=s(p,[["render",t]]);export{h as __pageData,v as default};
